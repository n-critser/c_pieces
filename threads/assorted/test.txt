 
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-backends
   '(company-bbdb company-eclim company-semantic company-xcode company-cmake company-capf company-files
		  (company-dabbrev-code company-gtags company-etags company-keywords)
		  company-oddmuse company-dabbrev))
 '(custom-enabled-themes '(manoj-dark))
 '(epg-gpg-program "/usr/bin/gpg")
 '(inhibit-startup-screen t)
 '(make-backup-files nil)
 '(package-selected-packages
   '(auctex ggtags jdee gtags projectile company use-package neotree all-the-icons))
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 160 :width normal)))))
;;;;;;
;(set-default-font “Monospace Regular 12”)
;;Cousine

;;;;;;;;;;;;;;;;;;
;; steve percell stuff
(add-to-list 'load-path (expand-file-name "init" user-emacs-directory))

;;;;;;;; ALL THE PACKAGE STUFF ?? MAYBER
(require 'package) ;; You might already have this line
;; Package configs
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

;; Bootstrap `use-package`
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

;;;;;;;;;;;; ORG MODE SECTION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-export-preserve-breaks t)
(setq org-list-allow-alphabetical t)
(setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
(setq org-latex-packages-alist '(("margin=3cm" "geometry" nil)
				 ))

(setq org-todo-keywords '((type "TODO(t)" "|" "STARTED(s!)"  "|" "DONE(d!)" "CANCELED(c!)" )))

(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "OrangeRed2") )
	("STARTED" . (:foreground "yellow" :weight normal) )
        ("DONE" . (:foreground "MediumAquamarine" :weight bold))
	("CANCELED" . (:foreground "DarkOliveGreen" :weight bold))
	))

;;;;;;;;;;;;; END ORG MODE SECTION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;; GENERAL BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(scroll-bar-mode -1)
(tool-bar-mode   t)
(tooltip-mode    -1)
(menu-bar-mode   t)

;;(add-to-list 'default-frame-alist '(font . "mononoki-12"))
(add-to-list 'default-frame-alist '(height . 60))
(add-to-list 'default-frame-alist '(width . 120))

(use-package projectile
  :ensure t
  :init
  (setq projectile-require-project-root nil)
  :config
  (projectile-mode 1))


;; All The Icons
(use-package all-the-icons :ensure t)

;; NeoTree
(use-package neotree
  :ensure t
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

;; Theme requires emacs 25+
;; (use-package doom-themes
;;   :ensure t
;;   :config
;;   (load-theme 'doom-one t))

;;;;;;;; END GENERAL BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;   C / C++ DEV ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'cedet)
(require 'cc-mode)
(require 'semantic)
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(global-semantic-highlight-func-mode 1)
(global-semantic-idle-completions-mode 1)
(global-semantic-idle-summary-mode 1)
(global-semantic-idle-local-symbol-highlight-mode 1)
(require 'semantic/ia)
(require 'semantic/bovine/gcc)
(semantic-mode 1)
(setq compilation-scroll-output 'first-error)
;; (add-hook 'c-mode-common-hook
;;           (lambda ()
;;             (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
;; 	      (company-mode 1)
;; 	      (font-lock-mode 1)
;; 	      )))




(use-package ggtags
    :ensure t
    :defer t)
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
	    ; STYLE ;
	    (set-variable 'c-default-style "linux")

            (font-lock-mode 1)
            (set-variable 'show-trailing-whitespace t)
	    (set-variable 'indent-tabs-mode nil)
	    (set-variable 'c-basic-offset 4)
	    (set-variable 'tab-width 8)
					; END STYLE;
					; BEHAVIOR ;
	    (linum-mode 1)
	    (company-mode 1)	    
            (ggtags-mode 1)
					; END BEHAVIOR ;
	    )))

(add-hook 'c-mode-hook
          (lambda ()

	    ; STYLE ;
	    (set-variable 'c-default-style "linux")

            (font-lock-mode 1)
            (set-variable 'show-trailing-whitespace t)
	    (set-variable 'indent-tabs-mode nil)
	    (set-variable 'c-basic-offset 4)
	    (set-variable 'tab-width 8)
					; END STYLE;
					; BEHAVIOR ;
	    ;(company-mode 1)	    
					; END BEHAVIOR ;
	    ))





(use-package company
  :ensure t
  :config )


(setq stack-trace-on-error t)

;; UNCOMMENT IF ERRORS OCCUR
;(toggle-debug-on-error t)

;(add-hook 'after-init-hook 'global-company-mode)





;; check out : https://blog.jft.rocks/emacs/emacs-from-scratch.html for some of these
;; Helm ?  requires emacs 24.4 +
;; (use-package helm
;;   :ensure t
;;   :init
;;   (setq helm-M-x-fuzzy-match t
;;   helm-mode-fuzzy-match t
;;   helm-buffers-fuzzy-matching t
;;   helm-recentf-fuzzy-match t
;;   helm-locate-fuzzy-match t
;;   helm-semantic-fuzzy-match t
;;   helm-imenu-fuzzy-match t
;;   helm-completion-in-region-fuzzy-match t
;;   helm-candidate-number-list 150
;;   helm-split-window-in-side-p t
;;   helm-move-to-line-cycle-in-source t
;;   helm-echo-input-in-header-line t
;;   helm-autoresize-max-height 0
;;   helm-autoresize-min-height 20)
;;   :config
;;   (helm-mode 1))


;; Projectile requires 25.1++
;; (use-package epa-file
;;   :ensure t
;;   :config )

;; (require 'epa-file)
;; (custom-set-variable '(epg-gpg-program "/usr/bin/gpg2"))
;; (epa-file-enable)
;(setq epg-gpg-program "gpg2")


;; Frame title for host important environment
(setq-default frame-title-format
              '(:eval
                (format "%s-%s"
			(if nil (format "%s@%s"
					(or (file-remote-p default-directory 'user)
					    user-real-login-name)
					(or (file-remote-p default-directory 'host)
					    system-name))
			  (buffer-name))
                        (cond
                         (t
                          (concat ": " (file-name-directory (expand-file-name (file-name-base)))))
                         (t
                          "what"))
			)))



